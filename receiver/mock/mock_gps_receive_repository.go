// Code generated by MockGen. DO NOT EDIT.
// Source: gps_receive_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ktr03rtk/go-gps-logger/receiver/domain/model"
)

// MockGpsReceiveRepository is a mock of GpsReceiveRepository interface.
type MockGpsReceiveRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGpsReceiveRepositoryMockRecorder
}

// MockGpsReceiveRepositoryMockRecorder is the mock recorder for MockGpsReceiveRepository.
type MockGpsReceiveRepositoryMockRecorder struct {
	mock *MockGpsReceiveRepository
}

// NewMockGpsReceiveRepository creates a new mock instance.
func NewMockGpsReceiveRepository(ctrl *gomock.Controller) *MockGpsReceiveRepository {
	mock := &MockGpsReceiveRepository{ctrl: ctrl}
	mock.recorder = &MockGpsReceiveRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGpsReceiveRepository) EXPECT() *MockGpsReceiveRepositoryMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockGpsReceiveRepository) Receive() (*model.Gps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive")
	ret0, _ := ret[0].(*model.Gps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockGpsReceiveRepositoryMockRecorder) Receive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockGpsReceiveRepository)(nil).Receive))
}
