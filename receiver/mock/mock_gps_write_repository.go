// Code generated by MockGen. DO NOT EDIT.
// Source: gps_write_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ktr03rtk/go-gps-logger/receiver/domain/model"
)

// MockGpsWriteRepository is a mock of GpsWriteRepository interface.
type MockGpsWriteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGpsWriteRepositoryMockRecorder
}

// MockGpsWriteRepositoryMockRecorder is the mock recorder for MockGpsWriteRepository.
type MockGpsWriteRepositoryMockRecorder struct {
	mock *MockGpsWriteRepository
}

// NewMockGpsWriteRepository creates a new mock instance.
func NewMockGpsWriteRepository(ctrl *gomock.Controller) *MockGpsWriteRepository {
	mock := &MockGpsWriteRepository{ctrl: ctrl}
	mock.recorder = &MockGpsWriteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGpsWriteRepository) EXPECT() *MockGpsWriteRepositoryMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockGpsWriteRepository) Write(arg0 *model.Gps) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockGpsWriteRepositoryMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockGpsWriteRepository)(nil).Write), arg0)
}
