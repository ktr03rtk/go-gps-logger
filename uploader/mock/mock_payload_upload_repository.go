// Code generated by MockGen. DO NOT EDIT.
// Source: payload_upload_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ktr03rtk/go-gps-logger/uploader/domain/model"
)

// MockPayloadUploadRepository is a mock of PayloadUploadRepository interface.
type MockPayloadUploadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadUploadRepositoryMockRecorder
}

// MockPayloadUploadRepositoryMockRecorder is the mock recorder for MockPayloadUploadRepository.
type MockPayloadUploadRepositoryMockRecorder struct {
	mock *MockPayloadUploadRepository
}

// NewMockPayloadUploadRepository creates a new mock instance.
func NewMockPayloadUploadRepository(ctrl *gomock.Controller) *MockPayloadUploadRepository {
	mock := &MockPayloadUploadRepository{ctrl: ctrl}
	mock.recorder = &MockPayloadUploadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayloadUploadRepository) EXPECT() *MockPayloadUploadRepositoryMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockPayloadUploadRepository) Upload(arg0 *model.Payload) ([]*model.BaseFilePath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0)
	ret0, _ := ret[0].([]*model.BaseFilePath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockPayloadUploadRepositoryMockRecorder) Upload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockPayloadUploadRepository)(nil).Upload), arg0)
}
